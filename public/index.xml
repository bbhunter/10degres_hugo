<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>10degres</title>
    <link>https://10degres.net/</link>
    <description>Recent content on 10degres</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://10degres.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unrestricted File Upload in Canteen Management System</title>
      <link>https://10degres.net/cves/cve-2022-43265/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2022-43265/</guid>
      <description>&lt;p&gt;An arbitrary file upload vulnerability in the component &lt;code&gt;/pages/save_user.php&lt;/code&gt; of Canteen Management System v1.0 allows attackers to execute arbitrary code via a crafted PHP file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CVE demystified</title>
      <link>https://10degres.net/cve-demystified/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cve-demystified/</guid>
      <description>&lt;p&gt;As a security researcher, as a beginner, you may see the fact of having your own CVE as the Graal.&lt;/p&gt;
&lt;p&gt;What are CVEs ?
Who can request them ?
Is it possible to get your own ?
Where to search ? What products ?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s demystify the legend.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>One takeover to rule them all</title>
      <link>https://10degres.net/one-takeover-to-rule-them-all/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/one-takeover-to-rule-them-all/</guid>
      <description>Because of Covid, the first quarantaine in France occured in March 2020. During that time I wrote a Python script to detect Subdomain Takeover. As I have been successful several times with the tool, one hit was especially beautiful.
The story of how I have been able to take control of 450+ subdomains of the national french electricity company EDF.
I&#39;m not going to explain what is subdomain takeover so take a look at the following articles if you want to know more: OWASP test guide</description>
    </item>
    
    <item>
      <title>The underlying rules of bug bounty</title>
      <link>https://10degres.net/the-underlying-rules-of-bug-bounty/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/the-underlying-rules-of-bug-bounty/</guid>
      <description>3 entities, 3 jobs The bug bounty industry is mainly composed of three big entities with each a specific job:
Programs: the need. Companies who want to test their security.
Besides triage, companies have alot to do. Create well detailed policies to ensure that hunters will focus on the most interesting issues. Prepare the internal workflow of all concerned teams to handle the flow of reports. Estimate the severity of every reports and consequently reward and finally, fix the bugs.</description>
    </item>
    
    <item>
      <title>How to keep hackers motivated in bug bounty</title>
      <link>https://10degres.net/how-to-keep-hackers-motivated-in-bug-bounty/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/how-to-keep-hackers-motivated-in-bug-bounty/</guid>
      <description>Nowadays, there is thousands of programs on several platforms, so how would you attract hackers to you? Why would I choose your program instead of another? Why would I spend time testing your system? Think about hackers like part of your customers or investors, you have convince them to work with you, you have to promote your program like you would market your products.
One big difference with pentest is that a bug bounty program is something you build on the long term.</description>
    </item>
    
    <item>
      <title>Code injection in SimpleJobScript by Niteosoft</title>
      <link>https://10degres.net/cves/cve-2020-22155/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22155/</guid>
      <description>&lt;p&gt;The installer of SimpleJobScript is vulnerable to Remote Command Execution if not completed yet through the parameter &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authenticated SQL injection in Zenphoto v1.5.6 and prior</title>
      <link>https://10degres.net/cves/cve-2020-22154/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22154/</guid>
      <description>&lt;p&gt;Zenphoto 1.5.6 was discovered to contain a SQL injection via the &lt;code&gt;postAlbumSort()&lt;/code&gt; function in &lt;code&gt;/zp-core/admin-functions.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code injection in Zenphoto v1.5.6 and prior</title>
      <link>https://10degres.net/cves/cve-2020-22145/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22145/</guid>
      <description>&lt;p&gt;A PHP code injection vulnerability in &lt;code&gt;/zp-core/setup/index.php&lt;/code&gt; of Zenphoto 1.5.6 allows attackers to execute arbitrary code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Path traversal in Zenphoto v1.5.6 and prior</title>
      <link>https://10degres.net/cves/cve-2020-22144/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22144/</guid>
      <description>&lt;p&gt;An issue in &lt;code&gt;/zp-core/admin-logs.php&lt;/code&gt; of Zenphoto 1.5.6 allows attackers to perform a directory traversal and read arbitrary log files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reflected XSS in Zenphoto v1.5.6 and prior</title>
      <link>https://10degres.net/cves/cve-2020-22143/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22143/</guid>
      <description>&lt;p&gt;A cross site scripting (XSS) vulnerability in &lt;code&gt;/page/search/&lt;/code&gt; of Zenphoto 1.5.6 allows attackers to execute arbitrary web scripts or HTML.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in SimpleJobScript</title>
      <link>https://10degres.net/cves/cve-2020-8645/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-8645/</guid>
      <description>&lt;p&gt;An issue was discovered in Simplejobscript.com SJS through 1.66. There is an unauthenticated SQL injection via the job applications search function. The vulnerable parameter is &lt;code&gt;job_id&lt;/code&gt;. The function is &lt;code&gt;getJobApplicationsByJobId()&lt;/code&gt;. The file is &lt;code&gt;_lib/class.JobApplication.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5 things to avoid in bug bounty</title>
      <link>https://10degres.net/5-things-to-avoid-in-bug-bounty/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/5-things-to-avoid-in-bug-bounty/</guid>
      <description>The second article of a serie about bug bounty management. This one give some tips to companies about what kind of mistakes they should avoid to keep good relationship with hackers.
Unfixed bugs Hackers work on your program, they could choose another one but they chose you. They spend time trying to find issues in your system, which is the purpose of a bug bounty program obviously, the minimum you can do is to fix what they report.</description>
    </item>
    
    <item>
      <title>Unrestricted file upload in SimpleJobScript</title>
      <link>https://10degres.net/cves/cve-2020-8440/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-8440/</guid>
      <description>&lt;p&gt;&lt;code&gt;controllers/page_apply.php&lt;/code&gt; in Simplejobscript.com SJS through 1.66 is prone to unauthenticated Remote Code Execution by uploading a PHP script as a resume.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in SimpleJobScript</title>
      <link>https://10degres.net/cves/cve-2020-7229/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-7229/</guid>
      <description>&lt;p&gt;An issue was discovered in Simplejobscript.com SJS before 1.65. There is unauthenticated SQL injection via the search engine. The parameter is &lt;code&gt;landing_location&lt;/code&gt;. The function is &lt;code&gt;countSearchedJobs()&lt;/code&gt;. The file is &lt;code&gt;_lib/class.Job.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5 things to do before running your first bug bounty program</title>
      <link>https://10degres.net/5-things-to-do-before-running-your-first-bug-bounty-program/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/5-things-to-do-before-running-your-first-bug-bounty-program/</guid>
      <description>Welcome 2020! I will start this year with a set of articles about program management. In this one, I will try to explain some important things all companies should do BEFORE running a first bug bounty program. Since there is no official rules in bug bounty, we miss that, at the end you can always do whatever you want. So those articles are more about best practices/good tips.
Do pentest/audits Test before the test.</description>
    </item>
    
    <item>
      <title>Bug bounty management, a bad example</title>
      <link>https://10degres.net/bug-bounty-management-a-bad-example/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/bug-bounty-management-a-bad-example/</guid>
      <description>&lt;p&gt;As I lately released an article about a &lt;a href=&#34;https://10degres.net/bug-bounty-management-a-great-example-zomato/&#34;&gt;good bug bounty program example&lt;/a&gt;, I also wanted to write something about what kind of behaviours companies should avoid to keep the community motivated.&lt;/p&gt;
&lt;p&gt;In 2017, I worked on a great program, so great that I published an article about them called &amp;ldquo;&lt;a href=&#34;https://10degres.net/the-bug-bounty-program-that-changed-my-life/&#34;&gt;The Bug Bounty program that changed my life&lt;/a&gt;&amp;rdquo;.
Since I was very successful on that program, some weeks ago I decided to give another try.
I quickly checked the policy on their Hackerone page and noticed some changes in the rules.
I quickly reported some small bugs and also noticed some changes in the reports management process.&lt;/p&gt;
&lt;p&gt;Unfortunately all those changes now make the program &lt;strong&gt;terrible&lt;/strong&gt;.
Here is my analysis.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bug bounty management, a great example: Zomato</title>
      <link>https://10degres.net/bug-bounty-management-a-great-example-zomato/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/bug-bounty-management-a-great-example-zomato/</guid>
      <description>&lt;p&gt;Since I decided to work on my advisor position in the bug bounty industry, I wanted to know more details about what makes a good program, what are the important keys and what to avoid.&lt;/p&gt;
&lt;p&gt;I contacted Prateek Tiwari, lead security engineering at &lt;a href=&#34;https://twitter.com/Zomato&#34;&gt;Zomato&lt;/a&gt;, he was nice enough to answer all my questions.
Let&amp;rsquo;s discover how Zomato became one of the best program, not only on Hackerone but in the whole bug bounty industry.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bug Bounty consulting</title>
      <link>https://10degres.net/services/</link>
      <pubDate>Sun, 27 Oct 2019 18:05:10 +0100</pubDate>
      
      <guid>https://10degres.net/services/</guid>
      <description>With more than 6 years of experience, I had the opportunity to study several aspects of this industry:
As a full time bug hunter, I am pretty familiar with their expectations: What they look for, what are their problems, what make them more involved&amp;hellip;
As a consultant, I work with platforms to solve the common problems in a relationship with hackers and handle the daily. Support the customers, manage the reports, keep hackers on the right track&amp;hellip;</description>
    </item>
    
    <item>
      <title>Press</title>
      <link>https://10degres.net/press/</link>
      <pubDate>Fri, 18 Oct 2019 17:50:10 +0200</pubDate>
      
      <guid>https://10degres.net/press/</guid>
      <description>Detectify blog - Bypassing Cloudflare WAF with the origin server IP address Pentester Land - How to think out of the box with @gwendallecoguic CANAL+ - Bonsoir! - Les chevaliers blancs du hacking BEHIND THE CODE Live Coding - Website Security Vulnerabilities France Inter - Hacking éthique</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://10degres.net/about/</link>
      <pubDate>Fri, 18 Oct 2019 16:06:21 +0200</pubDate>
      
      <guid>https://10degres.net/about/</guid>
      <description>After many years of web development, I finally decided to follow my dream: perform in the security industry. In october 2015, after 3 months of hard work, I successfully passed the famous Offensive Security Certified Professional exam.
Since, Bug Bounty is my daily.
As a hunter, I mainly work on HackerOne, the american leader in the field. As an active member of the community, I created many tools to automate the basics.</description>
    </item>
    
    <item>
      <title>GitHub tools collection</title>
      <link>https://10degres.net/github-tools-collection/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/github-tools-collection/</guid>
      <description>&lt;p&gt;This is the current thread in the bug hunter community: how to find sensitive informations on GitHub. Understand how to find tokens/keys/passwords on the largest code database in the world in order to pwn a company and get massive rewards. Using tools or doing it manually, some very talented people like &lt;a href=&#34;https://twitter.com/Th3G3nt3lman&#34;&gt;Th3G3nt3lman&lt;/a&gt; are real wizards when it comes to discover such treasures. Many tools are now available but since I wanted to learn Python for a long time, I jumped at the opportunity. In this article I&amp;rsquo;m going to present some scripts I wrote in PHP and Python to fit my needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare origin server</title>
      <link>https://10degres.net/cloudflare-origin-server/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cloudflare-origin-server/</guid>
      <description>&lt;p&gt;What is &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;? In short: Content Delivery Network (CDN), Web Application Firewall (WAF) and cherry/icing on the cake, 1 year go Cloudflare released a fast DNS resolver.
With 4 pricings and more than &lt;a href=&#34;https://www.cloudflare.com/case-studies/&#34;&gt;16M Internet properties&lt;/a&gt;, Cloudflare is now one of the most popular firewall used for web applications.
Working as a reverse proxy the WAF does not only offer a protection against DDOS but can also trigger an alert/error when he detects an attack.
But what if you can bypass all these protections in a second making the defense useless?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swag Store</title>
      <link>https://10degres.net/swag-store/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/swag-store/</guid>
      <description>&lt;p&gt;In the bug bounty industry, companies/programs reward hackers with bounties for their contribution, most of the time money and swag from time to time.
But what about platforms?
How platforms thank their hackers?
Unfortunately events are not a standard and only a few selected hackers can participate.
What about something more popular, something fair, something that all hunters could enjoy, even the beginners, even the casuals?
All platforms have a scoring system so what if you could transform this reputation/score to something more concrete?
This is THE SWAG STORE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Hunter Games</title>
      <link>https://10degres.net/the-hunter-games/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/the-hunter-games/</guid>
      <description>&lt;p&gt;What if bug bounty platforms had their own contest?
Imagine a tournament where bug hunters would be promoted and sponsored by platforms like in every (e-)sports.
Imagine an event where they could fight on a dedicated scope as it would be in a CTF event but with bounties or a Hackerone event but with a huge competition in the background.
This is THE HUNTER GAMES.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to write a Bug Bounty report</title>
      <link>https://10degres.net/how-to-write-a-bug-bounty-report/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/how-to-write-a-bug-bounty-report/</guid>
      <description>&lt;p&gt;One of the first thing I learned when I started security, is that the report is just as important as the pentest itself.
Some bug bounty platforms give reputation points according the quality.
While there is no official rules to write a good report, there are some good practices to know and some bad ones to avoid.
Mines are probably not the best but I never had any problem with any company, it&amp;rsquo;s also pretty rare that the secteam asks for more informations since I try to detail as much as I can in the initial report.
Let me give you some tips and the global pattern of my templates.
If you like it, use it, if not, then create your own :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS takeover through SSRF in JavaScript</title>
      <link>https://10degres.net/aws-takeover-through-ssrf-in-javascript/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/aws-takeover-through-ssrf-in-javascript/</guid>
      <description>&lt;p&gt;Here is the story of a bug I found in a private bug bounty program on &lt;a href=&#34;https://hackerone.com/&#34;&gt;Hackerone&lt;/a&gt;.
It took me exactly 12h30 -no break- to find it, exploit and report.
I was able to dump the AWS credentials, this lead me to fully compromise the account of the company: 20 buckets and 80 EC2 instances (Amazon Elastic Compute Cloud) in my hands.
Besides the fact that it&amp;rsquo;s one of my best bug in my hunter career, I also learnt alot during this sprint, so let&amp;rsquo;s share!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interview with a Bug Bounty program</title>
      <link>https://10degres.net/interview-with-a-bug-bounty-program/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/interview-with-a-bug-bounty-program/</guid>
      <description>&lt;p&gt;One month ago I started to chase on a new private program.
Since we were in touch by mail and since their office is pretty close to my place, I proposed to meet.
They immediatly accepted.
We talked for an hour, about security, my job, their program.
That was so interesting, question after question, we learned alot from each other.
I though it would be nice to share this experience, some people probably have some of these questions in mind, so in this article I tried to resume our interview.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Colorize your hunt</title>
      <link>https://10degres.net/colorize-your-hunt/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/colorize-your-hunt/</guid>
      <description>&lt;p&gt;As a full time bug hunter, it&amp;rsquo;s important to use the tools you are confortable with, sometimes a small improvement can change your life.
During the great 3 days course presented by &lt;a href=&#34;http://www.agarri.fr/&#34;&gt;Nicolas Grégoire&lt;/a&gt;, he showed us a browser called Autochrome.
Combined with a tiny Burp Suite extension, it becomes very easy to visualize the things you really want to see and reduce the noise for your eyes.
In this article I will show you my current configuration.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cons of Bug Bounty</title>
      <link>https://10degres.net/cons-of-bug-bounty/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cons-of-bug-bounty/</guid>
      <description>&lt;p&gt;This article is the following of the previous one (obviously&amp;hellip;) about &lt;a href=&#34;https://10degres.net/why-bug-bounty/&#34;&gt;why I love bug bounty&lt;/a&gt;.
However I realized that that one sounds like everything is perfect in this job, but since the world is not whole pinky full of rainbows, and butterflies, and unicorns, I have to say the truth.
Long time resolution, loneliness, deception, companies, there are also bad points (or maybe I&amp;rsquo;m just frustrated to get so much duplicates these days xD).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Find vulnerabilities in Flash SWF</title>
      <link>https://10degres.net/find-vulnerabilities-in-flash-swf/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/find-vulnerabilities-in-flash-swf/</guid>
      <description>&lt;p&gt;As a user I would say that I don&amp;rsquo;t care about all these Flash stuff that try to catch my eyes, most of the time I have a plugin to disable them.
As a developper, it reminds me the (not so good) old time when the marketing peoples always wanted to add &amp;ldquo;movement&amp;rdquo; in the website, yeah it looks so kool!
As a hacker, well&amp;hellip; I didn&amp;rsquo;t know how nice it could be, but I recently learned how to find issue in there and it&amp;rsquo;s funny as hell.
I was close to the success as I quickly found 3 XSS, but unfortunately all my reports were marked as duplicate :/&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Subdomain enumeration</title>
      <link>https://10degres.net/subdomain-enumeration/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/subdomain-enumeration/</guid>
      <description>&lt;p&gt;A friend recently asked me what methods I use to find subdomains.
To be honest I was confused, like &lt;em&gt;&amp;ldquo;oooohhh so much, brute force mmm&amp;hellip; zone transfer and&amp;hellip; brute for&amp;hellip; wait Google and mmm&amp;hellip; many other tools!&amp;rdquo;&lt;/em&gt;
What a shame that I was so inaccurate after so much time spent to look for subdomains.
Time to dig a little bit!
After I wrote a list of the most popular methods, I tried to make a list of some tools and online resources to exploit them.
Of course this list is far from exhaustive, there are many new stuff every day, but it&amp;rsquo;s still a good start :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why Bug Bounty</title>
      <link>https://10degres.net/why-bug-bounty/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/why-bug-bounty/</guid>
      <description>&lt;p&gt;People are usually surprised by the answer when they ask me what I do for living, questions rain, here are some answers.
My first report was a XSS on a Yahoo acquisition, it happened the 26th January 2016. Since this date, I (try to) perform Bug Bounty as a full time job on &lt;a href=&#34;https://hackerone.com&#34;&gt;Hackerone&lt;/a&gt;.
Did I say &amp;ldquo;job&amp;rdquo;? I don&amp;rsquo;t really consider bug bounty/hacking as a &amp;ldquo;job&amp;rdquo;, it&amp;rsquo;s more a hobby or a passion, because you have to be passionnate to perform in this domain.
So let&amp;rsquo;s say that bug bounty is my main source of income.
Below why I do this &amp;ldquo;job&amp;rdquo;, why it fits perfectly to me and why I love it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Bug Bounty program that changed my life</title>
      <link>https://10degres.net/the-bug-bounty-program-that-changed-my-life/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/the-bug-bounty-program-that-changed-my-life/</guid>
      <description>&lt;p&gt;This is a real story or not, that occured in mid 2017 or not, about a private program or not, on Hackerone or not, believe me or not, but it changed my life.
I would like to thanks all the people from this company I talked with.
They were very nice with me, very fast to fix the bugs and I always got the rewards in less than 7 days, frequently the day of the report, even for the smallest bugs.
Thanks to them, I wish we could find more program like this one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Massive pwnage</title>
      <link>https://10degres.net/massive-pwnage/</link>
      <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/massive-pwnage/</guid>
      <description>&lt;p&gt;There is different ways to hunt for vulnerabilities, depending of your knowledge, your skills, your expectation and how you like to chase.
I personally love programming and, as a true developper, I&amp;rsquo;m lazy, so I love to automate things.
By writing some piece of code or by combining multiple tools, you can find a lot of interesting stuff.
This article is about some scripts/tricks I wrote/use to perform massive tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSS with PhantomJS&lt;/li&gt;
&lt;li&gt;Heroku subdomain takeover&lt;/li&gt;
&lt;li&gt;Amazon S3 buckets theft&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Fail at CTF h1-212 - The Evil Job</title>
      <link>https://10degres.net/fail-at-ctf-h1-212-the-evil-job/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/fail-at-ctf-h1-212-the-evil-job/</guid>
      <description>&lt;p&gt;Hackerone recently released a CTF created by &lt;a href=&#34;https://twitter.com/jobertabma&#34;&gt;Jobert Abma&lt;/a&gt;. Even if I didn&amp;rsquo;t complete the challenge, it was so exciting and I was so close from the solution that I wanted to share a writeup.
Here is the tweet that tiggered the war:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hackers, hack your way to NYC this December for h1-212! An engineer of &lt;a href=&#34;http://acme.org&#34;&gt;http://acme.org&lt;/a&gt; launched a new server for a new admin panel. He is completely confident that the server can’t be hacked, so he hid a flag. Details: &lt;a href=&#34;https://www.hackerone.com/blog/hack-your-way-to-nyc-this-december-for-h1-212&#34;&gt;https://www.hackerone.com/blog/hack-your-way-to-nyc-this-december-for-h1-212&lt;/a&gt; …. #TogetherWeHitHarder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here is the full description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An engineer of acme.org launched a new server for a new admin panel at http://104.236.20.43/. He is completely confident that the server can’t be hacked. He added a tripwire that notifies him when the flag file is read. He also noticed that the default Apache page is still there, but according to him that’s intentional and doesn’t hurt anyone. Your goal? Read the flag!&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Wordpress testing</title>
      <link>https://10degres.net/wordpress-testing/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/wordpress-testing/</guid>
      <description>&lt;p&gt;Here is the way I usually follow to test a Wordpress install.&lt;/p&gt;
&lt;h2 id=&#34;information-gathering&#34;&gt;Information gathering&lt;/h2&gt;
&lt;p&gt;Get basic informations with &lt;a href=&#34;https://wpscan.org/&#34;&gt;WPScan&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --enumerate u --url http://www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it can&amp;rsquo;t retrieve the user list, try to use provided script &lt;code&gt;stop_user_enumeration_bypass.rb&lt;/code&gt;
For each user found, try to brute with basic passwords:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --url http://www.example.com --wordlist /Wordlists/Passwords/best1050.txt --username &amp;lt;username&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the version of Wordpress has been found, download it from the official archive directory:
&lt;a href=&#34;https://wordpress.org/download/release-archive/&#34;&gt;https://wordpress.org/download/release-archive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open the tested website and take a look at the source to find those strings:
&lt;code&gt;wp-content/themes&lt;/code&gt; and &lt;code&gt;wp-content/plugins&lt;/code&gt;
This could reveal more themes/plugins.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kick the bucket</title>
      <link>https://10degres.net/kick-the-bucket/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/kick-the-bucket/</guid>
      <description>&lt;p&gt;I already wrote &lt;a href=&#34;https://10degres.net/playing-with-s3-buckets/&#34;&gt;a post about Amazon S3 buckets&lt;/a&gt; but they became so popular these last weeks  that many people explain what is a bucket, what is the danger and how to exploit misconfiguration. My goal here is more: how/where to find those vulnerable buckets.&lt;/p&gt;
&lt;p&gt;First I assume you already know the basics, if not, you can read the excellent article from &lt;a href=&#34;https://labs.detectify.com/2017/07/13/a-deep-dive-into-aws-s3-access-controls-taking-full-control-over-your-assets/&#34;&gt;Frans Rosen on Detectify&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My way to go</title>
      <link>https://10degres.net/my-way-to-go/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/my-way-to-go/</guid>
      <description>&lt;h2 id=&#34;project&#34;&gt;Project&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Find Amazon s3 buckets:&lt;br&gt;
&lt;code&gt;s3-buckets-bruteforce /opt/SecLists/mine/s3-buckets.txt &amp;lt;project&amp;gt;-&lt;/code&gt;&lt;br&gt;
if found: &lt;code&gt;s3-buckets-extractor &amp;lt;bucket&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Explore GitHub account:&lt;br&gt;
&lt;code&gt;github-search -o &amp;lt;project&amp;gt; -r 1000 -s password&lt;/code&gt;&lt;br&gt;
&lt;code&gt;gitrob analyze quizlet --no-color --no-server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Subdomain takeover - DNS expiration</title>
      <link>https://10degres.net/subdomain-takeover-dns-expiration/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/subdomain-takeover-dns-expiration/</guid>
      <description>&lt;p&gt;One quick and easy way to make cash in bug bounty job is subdomain takeover.
The goal is to steal a forgetted/unused subdomain of your target and put a PoC in place.
If you are able to do that, that means that instead of a plain text file, an attacker could replicate the true site of the victim and perform phishing.
This way he could trick users and even the employees of the company to grab useful data like credentials, this can also have really huge impact on the companies reputation.&lt;/p&gt;
&lt;p&gt;First of all you have to find a list of subdomains of your target.
To perform that task, you can use a single tool like &lt;a href=&#34;https://10degres.net/theharvester/&#34;&gt;TheHarvester&lt;/a&gt; or &lt;a href=&#34;https://github.com/darkoperator/dnsrecon&#34;&gt;DNSRecon&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub search</title>
      <link>https://10degres.net/github-search/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/github-search/</guid>
      <description>&lt;p&gt;We all know the famous quote &amp;ldquo;&lt;em&gt;Think out of the box&lt;/em&gt;&amp;rdquo;.
Technical knowledge is important but creativity is also.
In bug bounty, to get nice rewards, sometimes you don&amp;rsquo;t need to be a crazy coder or great network engineer, you simply need to try what other didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;This year, Slack get in trouble because many developers leave their credentials in their public repository.
Last year Uber had to deal with a major security issue: database keys were stored in GitHub (this leads to a sweet bounty for the finder).&lt;/p&gt;
&lt;p&gt;I found an interesting project, on GitHub itself, to parse the search engine results: &lt;a href=&#34;https://github.com/melvinsh/vcsmap&#34;&gt;vcsmap from Melvinsh&lt;/a&gt;.
Unfortunately the scrapper seems to have trouble with search that required authentication.
Since I don&amp;rsquo;t understand Ruby, I wrote my own tool with PHP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in Wordpress plugin “gallery-images”</title>
      <link>https://10degres.net/cves/cve-2016-11018/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2016-11018/</guid>
      <description>&lt;p&gt;An issue was discovered in the Huge-IT gallery-images plugin before 1.9.0 for WordPress. The headers &lt;code&gt;Client-Ip&lt;/code&gt; and &lt;code&gt;X-Forwarded-For&lt;/code&gt; are prone to unauthenticated SQL injection. The affected file is &lt;code&gt;gallery-images.php&lt;/code&gt;. The affected function is &lt;code&gt;huge_it_image_gallery_ajax_callback()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with S3 buckets</title>
      <link>https://10degres.net/playing-with-s3-buckets/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/playing-with-s3-buckets/</guid>
      <description>&lt;p&gt;Amazon Simple Storage Service aka S3 is a cloud storage for the Internet.
You first create a bucket and you can then upload any number of objects (photos, videos, documents etc.) to it.
However if the permissions (ACL) are not well settled, bad things can happen.&lt;/p&gt;
&lt;p&gt;Recently disclosed by Hackerone, a misconfiguration in their Amazon Web Services S3 buckets allowed any authenticated user to write in there.
From here an attacker could upload a malicious file waiting for someone open it, or overwrite existing files.&lt;/p&gt;
&lt;p&gt;When you crawl a website, you can you can check the presence of S3 by intercepting calls to &lt;code&gt;amazonaws.com&lt;/code&gt;.
The bucket call can have different look:&lt;br&gt;
&lt;code&gt;https://&amp;lt;aws_region&amp;gt;.amazonaws.com/&amp;lt;bucket_name&amp;gt;/&amp;lt;file_path&amp;gt;&lt;/code&gt;&lt;br&gt;
or:&lt;br&gt;
&lt;code&gt;https://&amp;lt;bucket_name&amp;gt;.amazonaws.com/&amp;lt;file_path&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you get the bucket name, you can execute many tests using &lt;strong&gt;awscli&lt;/strong&gt; to check his permissions.
If you try to access to a bucket who doesn&amp;rsquo;t exist, you&amp;rsquo;ll get this message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ aws s3 ls s3://gwen001-azertyuiop  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A client error &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NoSuchBucket&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; occurred when calling the ListObjects operation: The specified bucket does not exist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you try to execute a command you are not allowed to, you&amp;rsquo;ll then get something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ aws s3 ls s3://gwen001-test000/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A client error &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AccessDenied&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; occurred when calling the ListObjects operation: Access Denied
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>An extremely buggy web app !</title>
      <link>https://10degres.net/an-extremely-buggy-web-app/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/an-extremely-buggy-web-app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;bWAPP&lt;/strong&gt; is a PHP web application which is intentionnally crackable. It covers a very large set of common vulns but also some unusual case you can meet on the Internet.&lt;/p&gt;
&lt;p&gt;The goal here is to train your development skill and hacking knowledge to be able to write a better (more secure) code.
Compared to &lt;a href=&#34;https://10degres.net/damn-vulnerable-web-application/&#34;&gt;DVWA&lt;/a&gt;, you have to consider bWAPP as a much more advanced level of difficulty.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/bwapp.png&#34; alt=&#34;bwapp&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sqlmap</title>
      <link>https://10degres.net/sqlmap/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/sqlmap/</guid>
      <description>&lt;p&gt;Written in Python by &lt;a href=&#34;https://twitter.com/stamparm&#34;&gt;Miroslav Stamper&lt;/a&gt;, Sqlmap is probably the best automated tool to detect and exploit SQL Injection.&lt;/p&gt;
&lt;p&gt;Sqlmap fully supports many databases as MySQL, Microsoft SQL Server, PostgreSQL, Oracle (and many more) and is able to detect the following injection types :
Boolean based blind, Error based, Union based, Stacked queries, Time based blind, Inline queries. Depending of the target status, sqlmap is also able to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prompt an interactive sql shell&lt;/li&gt;
&lt;li&gt;download/upload files&lt;/li&gt;
&lt;li&gt;prompt a web shell&lt;/li&gt;
&lt;li&gt;crack hashed password using a dictionnary attack&lt;/li&gt;
&lt;li&gt;and a lot more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below some examples of the main functions using &lt;a href=&#34;https://10degres.net/an-extremely-buggy-web-app/&#34;&gt;bWAPP&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/sqlmap-basic-usage.png&#34; alt=&#34;sqlmap basic usage&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example sqlmap has detected that the GET parameter &lt;code&gt;title&lt;/code&gt; of the search function is vulnerable to sql injection.
Well done! Plus it found that 4 different types of injection can be used for exploitation.
Note that sqlmap has also detected that the parameter is vulnerable to XSS attacks which is unfortunatly very common these days&amp;hellip;&lt;/p&gt;
&lt;p&gt;To perform test on POST field you should write: &lt;code&gt;--data=&amp;quot;title=sqlitest&amp;amp;action=search&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the next example, I&amp;rsquo;ll turn off the verbose mode.&lt;/p&gt;
&lt;br&gt;</description>
    </item>
    
    <item>
      <title>File transfer with ping</title>
      <link>https://10degres.net/file-transfer-with-ping/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/file-transfer-with-ping/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Anyone who ever deals with server managment knows the famous &lt;code&gt;ping&lt;/code&gt; utility.
Ping send &lt;strong&gt;ICMP request&lt;/strong&gt; to a remote host, it&amp;rsquo;s commonly used to test if a server is alive or to know his ip address.
However ping options allow us to customize this requests in some way, then it becomes possible to transfer any type of data.
For the purpose I test my script with different media types like png or mp3 and it worked perfectly.&lt;/p&gt;
&lt;h2 id=&#34;the-idea&#34;&gt;The idea&lt;/h2&gt;
&lt;p&gt;By default ping requests are formed with 98 bytes including 56 bytes of data and various headers.
With the &lt;code&gt;-p&lt;/code&gt; option, ping allows you to customize 16 of those 56 bytes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/ping_test.png&#34; alt=&#34;ping test&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the request catched with &lt;code&gt;tcpdump&lt;/code&gt; on the remote host:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/ping-capture.png&#34; alt=&#34;ping capture&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see the submitted string repeats again and again until the end of the data request.
If you provide a string longer than 16 bytes it will be truncated. From here, we can &lt;strong&gt;convert any data to hexa and send it through ping request&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Steganography</title>
      <link>https://10degres.net/steganography/</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/steganography/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;Steganography is the art of hidding a message in another common message.
The hidden message can be clear text or encrypted and the container can be anything: image, music, single text or whatever&amp;hellip; 
The main benefit of steganography is that you can get the final message only if you know the technic used to hide it, because you&amp;rsquo;ll need to use the same algorithm.
As a second layer of protection, you can also encrypt the data with any algorithm you like or with a private key.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bug Bounty Programs</title>
      <link>https://10degres.net/bug-bounty-programs/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/bug-bounty-programs/</guid>
      <description>&lt;p&gt;With the evolution of cybercrime this last years, security is became an important budget in large companies.
For instance, &lt;a href=&#34;https://www.facebook.com/whitehat/&#34;&gt;Facebook&lt;/a&gt; has created a dedicated platform for security reseacher and frequently reward them ($1.3 million spent in 2014).&lt;/p&gt;
&lt;p&gt;Ebay, Airbnb, Yahoo, Snapchat, Wordpress, all of these companies are now aware about security and all of them have subscribed a bug bounty program. 
Even mobile plateform as Android and IOS apps are recently focused by the giant Google.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Port forwarding and tunneling</title>
      <link>https://10degres.net/port-forwarding-and-tunneling/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/port-forwarding-and-tunneling/</guid>
      <description>&lt;p&gt;As a pentester, you might be able to take control of systems that have a direct access but you also might be able to test the internal network and check the machine who are inside a subnetwork.&lt;/p&gt;
&lt;p&gt;For that task you&amp;rsquo;ll have to use an already compromised machine as a bridge/gateway, this technic is called &amp;ldquo;pivot&amp;rdquo;.
Depending of the context, different solutions exist to perform that task.&lt;/p&gt;
&lt;h2 id=&#34;rinetd&#34;&gt;Rinetd&lt;/h2&gt;
&lt;p&gt;The easiest one. First you need to install Rinetd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aptitude search rinetd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p   rinetd                                     - Internet TCP redirection server&amp;lt;/pre&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then edit the &lt;code&gt;/etc/rinetd.conf&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# bindadress    bindport  connectaddress  connectport
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;192.168.0.10    80        91.121.139.22   8080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restart Rinetd and from now, all incoming traffic on &lt;code&gt;192.168.0.10&lt;/code&gt; on port &lt;code&gt;80&lt;/code&gt; will be redirected to &lt;code&gt;91.121.139.22&lt;/code&gt; on port &lt;code&gt;8080&lt;/code&gt;.
This can be usefull if a firewall is restricting outbound traffic on certain port.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Offensive Security Certified Professional</title>
      <link>https://10degres.net/offensive-security-certified-professional/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/offensive-security-certified-professional/</guid>
      <description>&lt;p&gt;The famous Offensive Security Certified Professional aka &lt;a href=&#34;https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/&#34;&gt;OSCP&lt;/a&gt;
is the certification of the Penetration Testing with Kali Linux course aka &lt;a href=&#34;https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/&#34;&gt;PWK&lt;/a&gt; 
provided by Offensive Security.&lt;/p&gt;
&lt;h2 id=&#34;offensive-security&#34;&gt;Offensive Security&lt;/h2&gt;
&lt;p&gt;Offensive Security is one the most active organization on the Internet about offsec.
In addition to providing pentest and attack simulation services to their customers, they also bring a lot of great solution to the community.&lt;/p&gt;
&lt;p&gt;Currently 6 online/live/in-house courses are available (pentest, wireless security, windows exploiation, web attacks&amp;hellip;) who go with 5 different well known certifications.
An incredible online virtual lab composed of intentionally vulnerable machine (ubuntu, XP, webapps, mail service, ftp vulns and so on&amp;hellip;) has been created to enhance you security knowledge. Offensive Security is also editor of awesome projects such as Kali Linux, Metasploit and Google Hacking Database, the most used tools by pentesters.&lt;/p&gt;
&lt;p&gt;The quality of all of these solutions is well recognized by the community and many companies and actually everyone who have to deals with offsec :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/offsectraining&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vimeo.com/offsec&#34;&gt;Vimeo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VwtOjFtWiRc&#34;&gt;Offsec Jam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Document Metadata</title>
      <link>https://10degres.net/document-metadata/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/document-metadata/</guid>
      <description>&lt;p&gt;Metadata are informations stored in a document itself but not easy to find for common mortals.
Those infos usually are: file name/type/size, author, organization, created date, last modified date and so on&amp;hellip;
But sometimes there are extra infos that could be very interesting from a hacker point of view like email, phone number, username, geoloc and even local ip address.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Secure your Wordpress</title>
      <link>https://10degres.net/secure-your-wordpress/</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/secure-your-wordpress/</guid>
      <description>&lt;p&gt;With more than 60 million websites, WordPress is the most popular CMS currently in use but it&amp;rsquo;s also based on the most hacked environment aka LAMP.&lt;/p&gt;
&lt;p&gt;As we all know, there is no way to stop a determined hacker but you can slow him down or detect him before things become serious.
Below some techniques to improve the security of your site. 
This post is directly inspired from &lt;a href=&#34;http://codex.wordpress.org/Hardening_WordPress&#34;&gt;Wordpress official codex&lt;/a&gt; and some hackers techniques I learned last months.&lt;/p&gt;
&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;
&lt;p&gt;According to Worpdress documentation, and I won&amp;rsquo;t discuss this point here, directories must have the following permission: &lt;code&gt;drwxr-xr-x&lt;/code&gt; (755) and files must be: &lt;code&gt;-rw-r--r--&lt;/code&gt; (644).
Wordpress says that automatic update changes file/dir permissions, that&amp;rsquo;s true but not that way in my case, maybe a cron job could do it ?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMB null session</title>
      <link>https://10degres.net/smb-null-session/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/smb-null-session/</guid>
      <description>&lt;p&gt;While performing a pentest, if you discover a server running the &lt;a href=&#34;http://en.wikipedia.org/wiki/Server_Message_Block&#34; title=&#34;Server Message Block&#34;&gt;SMB protocol&lt;/a&gt; 
you can test if it&amp;rsquo;s vulnerable to anonymous connection (also called null session) and then glean a lot of informations with
a &lt;a href=&#34;http://en.wikipedia.org/wiki/Remote_procedure_call&#34; title=&#34;Remote Procedure Call&#34;&gt;RPC&lt;/a&gt; client.
Nmap is usefull to locate that kind of service:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/smb-null-session-1.png&#34; alt=&#34;smb null session&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you can try to interact with the remote machine with the help of &lt;a href=&#34;https://www.samba.org/samba/docs/man/manpages/rpcclient.1.html&#34; title=&#34;Man rpcclient&#34;&gt;rpcclient&lt;/a&gt;.
To perform a null session you have to specify an empty user and an empty password.
If the host is not vulnerable, you will get the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rpcclient -U &amp;#34;&amp;#34; 192.168.1.31
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter &amp;#39;s password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;could not obtain sid for domain WORKGROUP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error: NT_STATUS_ACCESS_DENIED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But if the host is vulnerable you will immediatly get a prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rpcclient -U &amp;#34;&amp;#34; 192.168.1.18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter &amp;#39;s password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpcclient $&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>DVWA - CSRF</title>
      <link>https://10degres.net/dvwa-csrf/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dvwa-csrf/</guid>
      <description>&lt;p&gt;Cross-Site Request Forgery aka CSRF is an attack unintentionally triggered by the user himself.
It sends HTTP requests to execute unexpected actions in different ways: trough &lt;code&gt;img&lt;/code&gt; tag to perform &lt;code&gt;GET&lt;/code&gt; requests or with Ajax requests when &lt;code&gt;POST&lt;/code&gt; is required.
You can learn basic CSRF in &lt;a href=&#34;https://10degres.net/damn-vulnerable-web-application/&#34; title=&#34;Damn Vulnerable Web Application&#34;&gt;DVWA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To perform this CSRF you firstly need to log in, then you must visit a malicious site who will perform a stealth HTTP request who will submit the change password form with specific values.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;p&gt;The original request can be found by using a local proxy like Burp Suite or analyzing HTTP headers with a browser extension like &lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/live-http-headers/&#34;&gt;Live HTTP Headers&lt;/a&gt;.
The payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;My malicious website&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;It works like a charm!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://local.dvwa.com/vulnerabilities/csrf/?password_new=azerty&amp;amp;password_conf=azerty&amp;amp;Change=Change&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>DVWA - Insecure CAPTCHA</title>
      <link>https://10degres.net/dvwa-insecure-captcha/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dvwa-insecure-captcha/</guid>
      <description>&lt;p&gt;Captchas are usually used to prevent robots to make an action instead of humans.
It should add an extra layer of security but badly configured it could lead to unauthorized access&amp;hellip;&lt;/p&gt;
&lt;p&gt;When you try to submit the form without providing a captcha code, you get the following error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/dvwa-captcha-error.png&#34; alt=&#34;dvwa captcha error&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;p&gt;Try to submit an empty password and take a look to the HTTP request and her parameters, you can notice the strange variable &lt;code&gt;step&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/dvwa-captcha-low.png&#34; alt=&#34;dvwa captcha low&#34;&gt;&lt;/p&gt;
&lt;p&gt;This variable is the step in the change password functionnality.
So if you simply change it to &lt;code&gt;2&lt;/code&gt; and replay the request with this new value, it works perfectly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ping sweep</title>
      <link>https://10degres.net/ping-sweep/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/ping-sweep/</guid>
      <description>&lt;p&gt;In the second part of the first phase of a penetration test, active information gathering,it&amp;rsquo;s important to mapas accurate as possible the network of you target.
To find live hosts there isa technique called &lt;em&gt;ping sweep&lt;/em&gt;.
Different tools exist to perform that task.&lt;/p&gt;
&lt;h2 id=&#34;ping&#34;&gt;Ping&lt;/h2&gt;
&lt;p&gt;A single &lt;code&gt;ping&lt;/code&gt; can give you the ip address of the target, the ttl and the time. However since the methodis based on ICMP requests, the target could be configured to block or trash them&amp;hellip; With a simple bash script, you can loop throught a range of ip address to test them all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ip in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; 220&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ping -c &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 192.168.11.$ip | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes from&amp;#34;&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; -f1 &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;-c&lt;/code&gt; option is configuredto only send 1 request. The grep is usedto display onlythe host who respond to the request (and supposed alive) and finally cut is used for a nice display. Notice the &lt;code&gt;&amp;amp;&lt;/code&gt; at the end of the line, it&amp;rsquo;s very usefull pto paralellize tasks and make the script faster. Here is the result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/ping-sweep-ping.png&#34; alt=&#34;ping sweep ping&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hacker Test 1-10</title>
      <link>https://10degres.net/hacker-test-1-10/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/hacker-test-1-10/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.hackertest.net/&#34; title=&#34;Hacker Test&#34;&gt;Hacker Test&lt;/a&gt; is an online hacker simulation.
20 levels to test your PHP, HTML and Javascript knowledge.
Below the solution of the first ten.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hackers solve problems and build things, and they believe in freedom and voluntary mutual help.
To be accepted as a hacker, you have to behave as though you have this kind of attitude yourself.
And to behave as though you have the attitude, you have to really believe the attitude.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;level-1&#34;&gt;Level 1&lt;/h2&gt;
&lt;p&gt;In the source code we can see the following JavaScript lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (document.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.hackertest.net/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.htm&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try again&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value of the password input named &lt;code&gt;c&lt;/code&gt; is compared with the variable &lt;code&gt;a&lt;/code&gt;, which has a &lt;code&gt;null&lt;/code&gt; value. This is the password: &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Choose your password</title>
      <link>https://10degres.net/choose-your-password/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/choose-your-password/</guid>
      <description>&lt;p&gt;I recently worked with a well known web agency in France.
They have a good reputation, they were rewarded last year for their good works and they are in the top 40 of the best french agencies. &lt;/p&gt;
&lt;p&gt;However I was terribly surprised to find many basic errors/misconfiguration on their own site: error_reporting enable, 
SQL injection and finally a &amp;ldquo;private&amp;rdquo; admin section reachable with a simple couple of &lt;code&gt;demo&lt;/code&gt;/&lt;code&gt;demo&lt;/code&gt; as credentials&amp;hellip;&lt;/p&gt;
&lt;p&gt;Such vulnerability can be dangerous when using common login/password and it can be even deadly if the discovered user has high privileges.
It was true in this situation: mail contact, articles, resumes, photos everything was alterable.&lt;/p&gt;
&lt;p&gt;Below the good practice to create a strong password.&lt;/p&gt;
&lt;h2 id=&#34;the-rules&#34;&gt;The rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;must be at least 8 characters&lt;/li&gt;
&lt;li&gt;must be different than your previous password&lt;/li&gt;
&lt;li&gt;must NOT be related to your username&lt;/li&gt;
&lt;li&gt;must NOT contain any recognizable word&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DNS enumeration with Host</title>
      <link>https://10degres.net/dns-enumeration-with-host/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dns-enumeration-with-host/</guid>
      <description>&lt;p&gt;While performing a pentest the information gathering phase is the most important, it&amp;rsquo;s the key of a successful test.
The DNS is very great source of informations, whith some simple queries you will be able to grab usefull datas about the domain you are targeting.
The &lt;code&gt;host&lt;/code&gt; command is a very powerful DNS lookup utility which is present in all Linux distribution.&lt;/p&gt;
&lt;p&gt;For the examples, I will use a domain which allows that kind of query at this moment.&lt;/p&gt;
&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;As the &lt;code&gt;man&lt;/code&gt; says, &lt;code&gt;host&lt;/code&gt; is normally used to convert names to IP addresses and vice versa:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/dns-enumeration-host-basic.png&#34; alt=&#34;DNS enumeration host basic&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the domain doesn&amp;rsquo;t exist, you will meet that message: &lt;code&gt;Host pmolkijn.de not found: 3(NXDOMAIN)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the ip doesn&amp;rsquo;t point anywhere, you will get this message: &lt;code&gt;Host 91.121.139.2 not found: 3(NXDOMAIN)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weevely</title>
      <link>https://10degres.net/weevely/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/weevely/</guid>
      <description>&lt;p&gt;Weevely is a PHP command line web shell usually used as a backdoor while performing the post exploitation phase of a penetration test.
By default in Kali Linux, the installed version 1.1 isn&amp;rsquo;t supported anymore but version 3 is available on &lt;a href=&#34;https://github.com/epinna/weevely3&#34; title=&#34;Weevely on GitHub&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generate the backdoor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;weevely generate.&amp;lt;mode&amp;gt; &amp;lt;password&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The password is optionnal but it&amp;rsquo;s important to protect your customer from other users because an unwanted access can easily lead to a full access on the server with privileges escalation. There is three kinds of backdoor available but this functionnality seems to have been removed in version 3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;htaccess&lt;/strong&gt;: a single &lt;code&gt;.htaccess&lt;/code&gt; file is created containing the malicious code and the right Apache directive so that all &lt;code&gt;.htaccess&lt;/code&gt; files are considered as regular PHP script&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;img&lt;/strong&gt;: giving an existing image, Weevely will concatenate the binary datas and the malicious code, plus it also creates an &lt;code&gt;.htaccess&lt;/code&gt;
to tell Apache that the image should be considered as a regular PHP script (that means both files should be uploaded on the target server)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;php&lt;/strong&gt;: this is the default, a single PHP script is generated&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability in Wordpress Video Gallery</title>
      <link>https://10degres.net/vulnerability-in-wordpress-video-gallery/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-in-wordpress-video-gallery/</guid>
      <description>&lt;p&gt;Recently reported by Claudio Viviani, there is an SQL Injection available in this plugin who has been downloaded more than 100k.
Developped by Apptha (again), the current version 2.7 still vulnerable and downloadable from
the official &lt;a href=&#34;https://wordpress.org/plugins/contus-video-gallery/&#34; title=&#34;Wordpress Video Gallery&#34;&gt;Wordpress Plugin Directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hole comes from the lack of filter on the GET parameter &lt;code&gt;vid&lt;/code&gt; in &lt;code&gt;/wp-content/plugins/contus-video-gallery/videogalleryrss.php&lt;/code&gt; (the plugin must be enable to perform the injection):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $thumbImageorder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w.vid ASC&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $vid             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_input&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;INPUT_GET&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $where           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AND w.vid =&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$vid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $TypeOFvideos    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $contusOBJ&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home_thumbdata&lt;/span&gt;( $thumbImageorder , $where , $dataLimit );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there is no filter specified when calling &lt;a href=&#34;http://php.net/manual/fr/function.filter-input.php&#34; title=&#34;filter_input&#34;&gt;filter_input&lt;/a&gt;, the default value is used which is &lt;code&gt;unsafe_raw&lt;/code&gt;.
According to the PHP documentation, &lt;a href=&#34;http://php.net/manual/fr/filter.filters.sanitize.php&#34; title=&#34;FILTER_UNSAFE_RAW&#34;&gt;FILTER_UNSAFE_RAW&lt;/a&gt; deletes chars under 32 and over 127 and converts &lt;code&gt;&amp;amp;&lt;/code&gt; to &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DVWA - File upload</title>
      <link>https://10degres.net/dvwa-file-upload/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dvwa-file-upload/</guid>
      <description>&lt;p&gt;A very useful aspect of PHP is the ability to manage file uploads.
Allowing users to send a file opens a whole can of worms, so be careful when allowing this fonctionnality.
If wrong protected it could result of a full control of the server.
With DVWA you can learn effective defense.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;move_uploaded_file&lt;/span&gt;($_FILES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploaded&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;], $target_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your image was not uploaded.&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $target_path &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; succesfully uploaded!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first level is the easiest because it has absolutly no protection against malicious file upload.
Choose a file - in my case a PHP shell - and submit the form:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/dvwa-file-upload_1.png&#34; alt=&#34;DVWA file upload&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OWASP Top 10</title>
      <link>https://10degres.net/owasp-top-10/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/owasp-top-10/</guid>
      <description>&lt;p&gt;The Open Web Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications that can be trusted.
All of the OWASP tools, documents, forums, and chapters are free and open to anyone interested in improving application security.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34; title=&#34;OWASP Top 10 project&#34;&gt;OWASP Top 10 project&lt;/a&gt; references the most security issues and widespread on the web.
Most safety audits and specialized tools are based on the Top 10.
The primary aim is to educate developers, designers, architects, managers, and organizations about the consequences of the most important web application security weaknesses.
The Top 10 also provides basic techniques to protect against these high risk problem areas.&lt;/p&gt;
&lt;p&gt;For each risks, OWASP provides generic information about likelihood and technical impact using the following simple ratings scheme, which is based on the Rating Methodology:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/owasp-top10-risk.png&#34; alt=&#34;OWASP top10 risk&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to pentesting</title>
      <link>https://10degres.net/introduction-to-pentesting/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/introduction-to-pentesting/</guid>
      <description>&lt;p&gt;As an ethical hacker when you perform a pentest, you must follow some rules and process step by step to be efficient, below the different phases shortly explained.&lt;/p&gt;
&lt;h2 id=&#34;agreement&#34;&gt;Agreement&lt;/h2&gt;
&lt;p&gt;The first step of a penetration test is to write an agreement, a kind of pre-engagement about the legal requirements and the rules of the test.
It must be signed by both parties before starting the analysis.
Some important informations have to be defined with your client:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the scope: ip range, URL, server&amp;hellip;&lt;/li&gt;
&lt;li&gt;the method used: white/grey/black box&lt;/li&gt;
&lt;li&gt;the start date and the end date&lt;/li&gt;
&lt;li&gt;the forbidden techniques: denial of service, social engineering&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;gt; Read the &lt;a href=&#34;https://www.truesec.be/docs/TrueSec-Pentest-Agreement-v2.pdf&#34;&gt;agreement example by TrueSec&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL Truncation</title>
      <link>https://10degres.net/mysql-truncation/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/mysql-truncation/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;Here is a very interesting issue in MySQL database.
SQL truncation occurs when you try to insert/update a field with a string which is longer than the maximum length defined in the table structure.
For instance if you defined a column &lt;code&gt;name&lt;/code&gt; as a varchar(8) and you provide &lt;code&gt;abracadabra&lt;/code&gt; wich is 11, MySQL will truncate the string to 8 and will insert &lt;code&gt;abracada&lt;/code&gt; instead.
No message, no warning, nothing at all. This flaw can lead to security issue in some case.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;First I create this small table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) unsigned &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;login&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;passwd&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>DotDotPwn</title>
      <link>https://10degres.net/dotdotpwn/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dotdotpwn/</guid>
      <description>&lt;p&gt;Path traversal is a very powerful attack but not necessarily easy to find, fortunatly DotDotPwn is here to help you! &lt;a href=&#34;http://dotdotpwn.blogspot.fr/&#34; title=&#34;DotDotPwn&#34;&gt;DotDotPwn&lt;/a&gt; is a powerful traversal directory fuzzer.
Written in perl, it&amp;rsquo;s installed in Kali Linux by default.&lt;/p&gt;
&lt;p&gt;Basic usage is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotdotpwn.pl -m &amp;lt;module&amp;gt; -h &amp;lt;host&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Several options are available:&lt;/p&gt;
&lt;p&gt;-h: the host you want to test&lt;br&gt;
-m: it supports http, ftp or text file as a payload&lt;br&gt;
-o and -O: enable the operating system detection&lt;br&gt;
-d: max depth it will look for (ie. max &lt;code&gt;../&lt;/code&gt;)&lt;br&gt;
-f: file to grab (default is &lt;code&gt;/etc/passwd&lt;/code&gt; for *nix system)&lt;br&gt;
-E: try to grab some extra files depending of the os detection result&lt;br&gt;
-S: ssl support&lt;br&gt;
-x: specify the port&lt;br&gt;
-r: output file&lt;br&gt;
-q: quiet mode&lt;br&gt;
-k: keyword to match in the response who means a win&lt;br&gt;
-b: exit after the first vulnerability found&lt;br&gt;
-M: http method to use with http module (can&amp;rsquo;t make it work)&lt;br&gt;
-e: add an extension (.php, .png, &amp;hellip;)&lt;/p&gt;
&lt;p&gt;and some more&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploit Exercices, Nebula &amp;ndash; level03</title>
      <link>https://10degres.net/exploit-exercices-nebula-ndash-level03/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/exploit-exercices-nebula-ndash-level03/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.
There is a crontab that is called every couple of minutes.
Files for this level can be found in /home/flag03.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, let&amp;rsquo;s check the home directory of our target &lt;code&gt;flag03&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/exploit_exercices_nebula_level03_1.png&#34; alt=&#34;Exploit Exercises Nebula Level03&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok we have an empty directory with full access and a shell script who looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in /home/flag03/writable.d/* ; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ulimit -t 5; bash -x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>theHarvester</title>
      <link>https://10degres.net/theharvester/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/theharvester/</guid>
      <description>&lt;p&gt;Information gathering is the first and the most important step of a penetration test.
More informations you will grab, easier the exploit will be.&lt;/p&gt;
&lt;p&gt;Developed by Christian Martorella &lt;a href=&#34;https://code.google.com/p/theharvester/&#34;&gt;theHarvester&lt;/a&gt; is very usefull for this task.
It&amp;rsquo;s a python script that will help you to find user emails and subdomains of a given domain by merely parsing search engines results.
The following data sources are supported :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bing,&lt;/li&gt;
&lt;li&gt;google, googleCSE, googleplus, google-profiles&lt;/li&gt;
&lt;li&gt;jigsaw&lt;/li&gt;
&lt;li&gt;linkedin&lt;/li&gt;
&lt;li&gt;people123&lt;/li&gt;
&lt;li&gt;pgp&lt;/li&gt;
&lt;li&gt;shodan&lt;/li&gt;
&lt;li&gt;twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;theHarvester is by default installed on Kali Linux. Basic usage is:
&lt;code&gt;theharvester -d &amp;lt;domain&amp;gt; -b &amp;lt;source&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DVWA - XSS reflected</title>
      <link>https://10degres.net/dvwa-xss-reflected/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/dvwa-xss-reflected/</guid>
      <description>&lt;p&gt;According to OWASP Top 10, Cross-Site Scripting aka XSS takes the 3rd place in the more common and important web vulnerabilities list.
Her primary goal is to spoof the session of another user by stealing his cookie id, usually a privileged user like an admin. 
You can train XSS in Damn Vulnerable Web Application, here are some tests you can perform.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array_key_exists&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, $_GET) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $isempty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;];  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code output the &lt;code&gt;name&lt;/code&gt; parameter without any filter so it&amp;rsquo;s very vulnerable to XSS!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Browser extensions</title>
      <link>https://10degres.net/browser-extensions/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/browser-extensions/</guid>
      <description>&lt;p&gt;There is a lot of browser extensions developed by the community, here are my favorites.&lt;/p&gt;
&lt;h2 id=&#34;firefox&#34;&gt;Firefox&lt;/h2&gt;
&lt;p&gt;All of this following extensions can be found in the &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/collections/yehgdotnet/webhacker/&#34; title=&#34;HackerFox&#34;&gt;HackerFox&lt;/a&gt; suite.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/calomel-ssl-validation/&#34; title=&#34;Calomel SSL Validation&#34;&gt;Calomel SSL Validation&lt;/a&gt; :
validate the grade of security of the SSL connection. The button will change color depending on the strength of encryption.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/firebug/&#34; title=&#34;Firebug&#34;&gt;Firebug&lt;/a&gt; : 
Firebug is the best addon &lt;strong&gt;ever&lt;/strong&gt;. Used by web developers to can edit, debug, and monitor CSS, HTML, and JavaScript live in any web page.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/hackbar/&#34; title=&#34;HackBar&#34;&gt;HackBar&lt;/a&gt; :
perfect to test SQL injections. Easy to use and some options like encoding (base64, url, hex), encryption (md5, sha-256, rot13). You can also alter POST data and your referer.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/httpfox/&#34; title=&#34;HttpFox&#34;&gt;HttpFox&lt;/a&gt; :
display informations about the query : headers, cookies, POST data, time and so on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Exploit Exercices, Nebula - level00</title>
      <link>https://10degres.net/exploit-exercices-nebula-level00/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/exploit-exercices-nebula-level00/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/&#34; title=&#34;Exploit Exercises, Nebula&#34;&gt;Nebula&lt;/a&gt; is part of Exploit Exercises,
it covers a variety of simple and intermediate challenges that cover Linux privilege escalation, common scripting language issues, and file system race conditions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the “flag00” account.
You could also find this by carefully looking in top level directories in / for suspicious looking directories.
Alternatively, look at the find man page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this first level, you have to find a file owned by &lt;code&gt;flag00&lt;/code&gt; with suid bit.
A single command can do the trick:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -user flag00 -perm /6000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Exploit Exercices, Nebula - level01</title>
      <link>https://10degres.net/exploit-exercices-nebula-level01/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/exploit-exercices-nebula-level01/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?
Files for this level can be found in /home/flag01.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys types.h=&amp;#34;&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gid_t gid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uid_t uid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getegid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; geteuid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setresgid(gid, gid, gid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setresuid(uid, uid, uid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/env echo and now what?&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program has been compiled and the executable is available in &lt;code&gt;/home/flag01&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploit Exercices, Nebula - level02</title>
      <link>https://10degres.net/exploit-exercices-nebula-level02/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/exploit-exercices-nebula-level02/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?
Files for this level can be found in /home/flag02.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buffer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gid_t gid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uid_t uid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getegid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; geteuid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setresgid(gid, gid, gid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setresuid(uid, uid, uid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  asprintf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/echo %s is cool&amp;#34;&lt;/span&gt;, getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;about to call system(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  system(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the previous level, we here have a suid executable, owned by our target &lt;code&gt;flag02&lt;/code&gt;, who uses an environment variable &lt;code&gt;USER&lt;/code&gt; to print a super cool message.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Null Byte Injection</title>
      <link>https://10degres.net/null-byte-injection/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/null-byte-injection/</guid>
      <description>&lt;p&gt;I recently read a nice article on &lt;a href=&#34;http://resources.infosecinstitute.com/null-byte-injection-php/&#34; title=&#34;Null byte injection&#34;&gt;InfoSec Institute&lt;/a&gt;
(again) about Null byte injection.
However I met some problems to make it works in a real situation so I decided to write my own.&lt;/p&gt;
&lt;p&gt;First of all, this vulnerability has been &lt;strong&gt;fully patched in PHP 5.3.4&lt;/strong&gt; (until someone else find another buggy function&amp;hellip;), that means you need to install an old version of PHP.
Grab it in &lt;a href=&#34;http://php.net/releases/&#34; title=&#34;PHP releases&#34;&gt;PHP releases archive&lt;/a&gt;.
After compiled and configured, it&amp;rsquo;s very important to set &lt;strong&gt;magic_quotes_gpc=Off&lt;/strong&gt; in the &lt;code&gt;php.ini&lt;/code&gt; (it won&amp;rsquo;t work with &lt;code&gt;ini_set&lt;/code&gt; in the script itself).&lt;/p&gt;
&lt;p&gt;Then imagine an &lt;code&gt;index.php&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/var/www/pages/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a &lt;code&gt;/pages/store.php&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is the store !&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you call it directly it will works but in that case &lt;code&gt;index.php&lt;/code&gt; is usually used to display common stuffs like header and footer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerable by Design</title>
      <link>https://10degres.net/vulnerable-by-design/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerable-by-design/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/&#34; title=&#34;VulnHub&#34;&gt;VulnHub&lt;/a&gt; is a training platform which provides &amp;ldquo;&lt;em&gt;a catalogue of &amp;lsquo;stuff&amp;rsquo; that is (legally) &amp;lsquo;breakable,
hackable &amp;amp; exploitable&amp;rsquo;&lt;/em&gt;&amp;rdquo;, understand: a pool of vulnerable virtual machines.
The downloads are essentially &lt;code&gt;.iso&lt;/code&gt;, &lt;code&gt;.vbox&lt;/code&gt; or &lt;code&gt;.ova&lt;/code&gt; which can be opened with VirtualBox or VMware.&lt;/p&gt;
&lt;p&gt;The machines are created and proposed by the community itself.
Also different versions of the famous Damn Vulnerable Linux and the &lt;a href=&#34;https://exploit-exercises.com/&#34; title=&#34;Exploit Exercises&#34;&gt;Exploit Exercises suite&lt;/a&gt; are in.
You will have to deal with many many different kinds of vulnerabilities like file permissions, web application, shellcode, heap overflows, password cracking, privilege escalation and so on&amp;hellip;&lt;/p&gt;
&lt;p&gt;For instance, you can read the solution of one of those challenge on InfoSec Institute website:
&lt;a href=&#34;http://resources.infosecinstitute.com/troll-challenge/&#34; title=&#34;Tr0ll challenge solution&#34;&gt;The Tr0ll Challenge&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability in HD FLV Player</title>
      <link>https://10degres.net/vulnerability-in-hd-flv-player/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-in-hd-flv-player/</guid>
      <description>&lt;p&gt;Reported by &lt;a href=&#34;http://blog.sucuri.net/2014/12/critical-vulnerability-in-joomla-hd-flv-player-plugin.html&#34; title=&#34;Sucuri&#34;&gt;Sucuri&lt;/a&gt;,
the HD FLV Player suffers of an Arbitrary File Download vulnerability which is of course considered critical.&lt;/p&gt;
&lt;p&gt;The vulnerable code can be found in &lt;code&gt;download.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-disposition: attachment; filename=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;($filename));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readfile&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there is absolutly no check nor filter applied before using the &lt;code&gt;f&lt;/code&gt; parameter passed in the url, this is the perfect backdoor to get almost any file you want on the machine
(depending of the right of the user the server is running). No matter the plugin is enable or not, you simply need to run the install to be exposed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Damn Vulnerable Web Application</title>
      <link>https://10degres.net/damn-vulnerable-web-application/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/damn-vulnerable-web-application/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DVWA&lt;/strong&gt; is a PHP/MySQL web application that is intentionally vulnerable.
The goal is to learn common web vulnerabilities and improve your security skills by training yourself on your own server.
3 levels are available (low, medium and high) to perform those following attacks :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bruce Force&lt;/li&gt;
&lt;li&gt;Command Execution&lt;/li&gt;
&lt;li&gt;CSRF&lt;/li&gt;
&lt;li&gt;Captcha&lt;/li&gt;
&lt;li&gt;File Inclusion&lt;/li&gt;
&lt;li&gt;SQL Injection (plus Blind)&lt;/li&gt;
&lt;li&gt;File Upload&lt;/li&gt;
&lt;li&gt;XSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lowest level is usually pretty easy to bypass but the high level as a best practice presents the right way to protect your application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://10degres.net/resources/</link>
      <pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/resources/</guid>
      <description>&lt;p&gt;There is a lot of resources available about hacking and security, here are my favorites.&lt;/p&gt;
&lt;p&gt;Some blogs I frequently visit from bounty hunters themself.
They explain their findings, why it occurs, how they were able to exploit and sometimes how much they win.
I visit them once a week and I also follow their writer on Twitter to not miss the bugs they don&amp;rsquo;t review.&lt;/p&gt;
&lt;p&gt;In my opinion the best way to learn hacking and security is to read public disclosure.
It&amp;rsquo;s a great resources of tips and tools to use to make your life easier.
Some of my favorites issues, the ones I like to read again and again to understand the vulnerability and try to discern the state of mind of the hacker who found it.
It&amp;rsquo;s also a good way to improve your report skill and see the way hackers communicates with security teams to keep good feelings.&lt;/p&gt;
&lt;p&gt;Each Time I learn a new kind of issue, I try to reproduce it on on my local lab, then I try it on security programs I&amp;rsquo;m currently working on.
Sometime it works, sometimes not but bug bounty is also about patience. Happy reading !&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pentest - Exploitation tools</title>
      <link>https://10degres.net/pentest-exploitation-tools/</link>
      <pubDate>Tue, 01 Jan 1980 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/pentest-exploitation-tools/</guid>
      <description>&lt;p&gt;Below some tools you can use for exploitation while performing a penetration test:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.portcullis.co.uk/tools/acccheck/&#34;&gt;acccheck&lt;/a&gt;: SMB brute forcer (login/password)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.aircrack-ng.org/&#34; title=&#34;Aircrack-ng&#34;&gt;Aircrack&lt;/a&gt;: a suite of tools for 802.11a/b/g WEP and WPA cracking&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Armitage&#34; title=&#34;Armitage&#34;&gt;Armitage&lt;/a&gt;: GUI front-end for the Metasploit Framework&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/secretsquirrel/the-backdoor-factory/&#34;&gt;backdoor-factory&lt;/a&gt;: patch win32/64 binaries with shellcode&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Neohapsis/bbqsql/&#34;&gt;BBQSQL&lt;/a&gt;: SQL injection tools highly customizable&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://beefproject.com/&#34; title=&#34;BeEF&#34;&gt;BeEF&lt;/a&gt;: Browser Exploitation Framework, penetration testing tool that focuses on the web browser&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://portswigger.net/burp/&#34; title=&#34;Burp Suite&#34;&gt;Burp Suite&lt;/a&gt;: an integrated platform for performing security testing of web applications&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cookiecadger.com/&#34;&gt;cookie-cadger&lt;/a&gt;: catch web session on the network and reuse them to steal the session on a new browser&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.offensive-security.com/&#34;&gt;copy/merge-router-config&lt;/a&gt;: copy/merge config files from cisco router running snmp&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pentest - Information gathering tools</title>
      <link>https://10degres.net/pentest-information-gathering-tools/</link>
      <pubDate>Tue, 01 Jan 1980 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/pentest-information-gathering-tools/</guid>
      <description>&lt;p&gt;Below some tools you can use for information gathering while performing a penetration test:&lt;/p&gt;
&lt;h2 id=&#34;online&#34;&gt;Online&lt;/h2&gt;
&lt;p&gt;googledorks from &lt;a href=&#34;http://www.hackersforcharity.org/ghdb/&#34; title=&#34;Hackers for Charity Googledorks&#34;&gt;Hackers for Charity&lt;/a&gt; and 
from the &lt;a href=&#34;http://www.exploit-db.com/google-dorks/&#34; title=&#34;The Exploit Database Googledorks&#34;&gt;Exploit Database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ip-adress.com/&#34; title=&#34;IP-address&#34;&gt;IP-address&lt;/a&gt;:
free IP Address Lookup&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://toolbar.netcraft.com/site_report&#34; title=&#34;Netcraft&#34;&gt;Netcraft&lt;/a&gt;:
what is that site running?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.shodanhq.com/&#34; title=&#34;SHODAN&#34;&gt;SHODAN&lt;/a&gt;:
search engine for all connected object around the world (even fridges)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.threatagent.com/&#34; title=&#34;Threat Agent&#34;&gt;Threat Agent&lt;/a&gt;:
collect informations from open sources (seems to be down?)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.wolframalpha.com/&#34; title=&#34;Wolfram|Alpha&#34;&gt;Wolfram|Alpha&lt;/a&gt;: 
compute answers and provide knowledge&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.yougetsignal.com/&#34; title=&#34;YouGetSignal&#34;&gt;YouGetSignal&lt;/a&gt;: 
collection of uncomplicated, powerful network tools&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pentest - Post exploitation tools</title>
      <link>https://10degres.net/pentest-post-exploitation-tools/</link>
      <pubDate>Tue, 01 Jan 1980 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/pentest-post-exploitation-tools/</guid>
      <description>&lt;p&gt;Below some tools you can use for post exploitation while performing a penetration test:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cryptcat.sourceforge.net/&#34; title=&#34;Cryptcat&#34;&gt;Cryptcat&lt;/a&gt;:
Netcat enhanced with twofish encryption&lt;/p&gt;
&lt;p&gt;Hacker Defender:
rootkit for Windows&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rapid7/meterpreter&#34; title=&#34;Meterpreter&#34;&gt;Meterpreter&lt;/a&gt;:
provides an interactive shell which allows you to use extensible features at run time&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://netcat.sourceforge.net/&#34; title=&#34;Netcat&#34;&gt;Netcat&lt;/a&gt;:
networking utility which reads and writes data across network connections using the TCP/IP protocol.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pentest - Vulnerability assessment tools</title>
      <link>https://10degres.net/pentest-vulnerability-assessment-tools/</link>
      <pubDate>Tue, 01 Jan 1980 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/pentest-vulnerability-assessment-tools/</guid>
      <description>&lt;p&gt;Below some tools you can use for scans and vulnerability assessment while performing a penetration test:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.exploit-db.com/&#34; title=&#34;exploit-db&#34;&gt;exploit-db&lt;/a&gt;: The Exploit Database&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://rgaucher.info/beta/grabber/&#34;&gt;grabber&lt;/a&gt;: web application scanner&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://inguma.eu/projects/inguma&#34;&gt;inguma&lt;/a&gt;: pentest toolkik which can perfom target auditing and information gathering&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.metasploit.com/&#34; title=&#34;Metasploit&#34;&gt;Metasploit&lt;/a&gt;: “world’s most used penetration testing software”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.tenable.com/products/nessus&#34; title=&#34;Nessus&#34;&gt;Nessus&lt;/a&gt;: vulnerability scanner&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cirt.net/Nikto2&#34; title=&#34;Nikto&#34;&gt;Nikto&lt;/a&gt;: an Open Source web server scanner&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cqure.net/wp/tools/database/oscanner/&#34;&gt;oscanner&lt;/a&gt;: oracle assessment framework&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.exploit-db.com/&#34;&gt;searchsploit&lt;/a&gt;: search in exloit-db database&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerabilities list</title>
      <link>https://10degres.net/vulnerabilities-list/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerabilities-list/</guid>
      <description>&lt;p&gt;Here is a non exhausted list of vulnerabilities that I use as a reminder with links for reference.
It&amp;rsquo;s based on many different &lt;a href=&#34;https://10degres.net/resources/&#34;&gt;resources&lt;/a&gt; available on the Internet.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability - Clickjacking</title>
      <link>https://10degres.net/vulnerability-clickjacking/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-clickjacking/</guid>
      <description>Description Clickjacking by Wikipedia
Frameable response (potential Clickjacking) by PortSwigger</description>
    </item>
    
    <item>
      <title>Vulnerability - Cross Origin Resource Sharing aka CORS</title>
      <link>https://10degres.net/vulnerability-cross-origin-resource-sharing-aka-cors/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-cross-origin-resource-sharing-aka-cors/</guid>
      <description>Description CORS OriginHeaderScrutiny by OWASP
Cross-origin resource sharing by Wikipedia
Cross-origin resource sharing by PortSwigger
Cross-origin resource sharing: arbitrary origin trusted by PortSwigger
Cross-origin resource sharing: unencrypted origin trusted by PortSwigger
Cross-origin resource sharing: all subdomains trusted by PortSwigger
Articles Exploiting CORS Misconfigurations for Bitcoins and Bounties by PortSwigger
Exploiting Misconfigured CORS by Geekboy
Critical Issue Opened Private Chats of Facebook Messenger Users by Cynet
Tools testcors by me</description>
    </item>
    
    <item>
      <title>Vulnerability - Cross Site Request Forgery aka CSRF</title>
      <link>https://10degres.net/vulnerability-cross-site-request-forgery-aka-csrf/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-cross-site-request-forgery-aka-csrf/</guid>
      <description>Description Cross-Site Request Forgery (CSRF) by OWASP
Cross-site request forgery by Wikipedia
Cross-site request forgery by PortSwigger</description>
    </item>
    
    <item>
      <title>Vulnerability - Cross Site Scripting aka XSS</title>
      <link>https://10degres.net/vulnerability-cross-site-scripting-aka-xss/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-cross-site-scripting-aka-xss/</guid>
      <description>Description Cross-site Scripting (XSS) by OWASP
Cross-site scripting by Wikipedia
Cross-site scripting (DOM-based) by PortSwigger
Cross-site scripting (reflected) by PortSwigger
Cross-site scripting (reflected DOM-based) by PortSwigger
Cross-site scripting (stored) by PortSwigger
Cross-site scripting (stored DOM-based) by PortSwigger
Browser cross-site scripting filter disabled by PortSwigger
Tools KNOXSS by Brute Logic
XSS Hunter by Mandatory</description>
    </item>
    
    <item>
      <title>Vulnerability - Relative Path Overwrite aka RPO or PRSSI</title>
      <link>https://10degres.net/vulnerability-relative-path-overwrite-aka-rpo-or-prssi/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-relative-path-overwrite-aka-rpo-or-prssi/</guid>
      <description>Description Path-relative style sheet import by PortSwigger
Articles Detecting and exploiting PRSSI vulnerabilites by PortSwigger
Relative path overwrite by The Spanner</description>
    </item>
    
    <item>
      <title>Vulnerability - SQL Injection aka SQLi</title>
      <link>https://10degres.net/vulnerability-sql-injection-aka-sqli/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-sql-injection-aka-sqli/</guid>
      <description>Description SQL Injection overview by OWASP
SQL injection by Wikipedia
SQL statement in request parameter by PortSwigger
SQL injection (basic) by PortSwigger
SQL injection (second order) by PortSwigger
Client-side SQL injection (DOM-based) by PortSwigger
Client-side SQL injection (reflected DOM-based) by PortSwigger
Client-side SQL injection (stored DOM-based) by PortSwigger
Articles The Ultimate SQL Injection Payload by Detectify
Videos DEFCON 17: Advanced SQL Injection
Hacktivity 2012 - Joe McCray - Big Bang Theory - Pentesting high security environments</description>
    </item>
    
    <item>
      <title>Vulnerability - Subdomain takeover</title>
      <link>https://10degres.net/vulnerability-subdomain-takeover/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-subdomain-takeover/</guid>
      <description>Articles Hostile subdomain takeover by Detectify
Hijacking of abandoned subdomains by Detectify
Tools dnsexpire by me
3rdparty-services by me</description>
    </item>
    
  </channel>
</rss>
