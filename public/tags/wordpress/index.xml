<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wordpress on Gwendal Le Coguic</title>
    <link>https://10degres.net/tags/wordpress/</link>
    <description>Recent content in wordpress on Gwendal Le Coguic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://10degres.net/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wordpress testing</title>
      <link>https://10degres.net/wordpress-testing/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/wordpress-testing/</guid>
      <description>&lt;p&gt;Here is the way I usually follow to test a Wordpress install.&lt;/p&gt;
&lt;h2 id=&#34;information-gathering&#34;&gt;Information gathering&lt;/h2&gt;
&lt;p&gt;Get basic informations with &lt;a href=&#34;https://wpscan.org/&#34;&gt;WPScan&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --enumerate u --url http://www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it can&amp;rsquo;t retrieve the user list, try to use provided script &lt;code&gt;stop_user_enumeration_bypass.rb&lt;/code&gt;
For each user found, try to brute with basic passwords:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --url http://www.example.com --wordlist /Wordlists/Passwords/best1050.txt --username &amp;lt;username&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the version of Wordpress has been found, download it from the official archive directory:
&lt;a href=&#34;https://wordpress.org/download/release-archive/&#34;&gt;https://wordpress.org/download/release-archive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open the tested website and take a look at the source to find those strings:
&lt;code&gt;wp-content/themes&lt;/code&gt; and &lt;code&gt;wp-content/plugins&lt;/code&gt;
This could reveal more themes/plugins.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in Wordpress plugin “gallery-images”</title>
      <link>https://10degres.net/cves/cve-2016-11018/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2016-11018/</guid>
      <description>&lt;p&gt;An issue was discovered in the Huge-IT gallery-images plugin before 1.9.0 for WordPress. The headers &lt;code&gt;Client-Ip&lt;/code&gt; and &lt;code&gt;X-Forwarded-For&lt;/code&gt; are prone to unauthenticated SQL injection. The affected file is &lt;code&gt;gallery-images.php&lt;/code&gt;. The affected function is &lt;code&gt;huge_it_image_gallery_ajax_callback()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Secure your Wordpress</title>
      <link>https://10degres.net/secure-your-wordpress/</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/secure-your-wordpress/</guid>
      <description>&lt;p&gt;With more than 60 million websites, WordPress is the most popular CMS currently in use but it&amp;rsquo;s also based on the most hacked environment aka LAMP.&lt;/p&gt;
&lt;p&gt;As we all know, there is no way to stop a determined hacker but you can slow him down or detect him before things become serious.
Below some techniques to improve the security of your site. 
This post is directly inspired from &lt;a href=&#34;http://codex.wordpress.org/Hardening_WordPress&#34;&gt;Wordpress official codex&lt;/a&gt; and some hackers techniques I learned last months.&lt;/p&gt;
&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;
&lt;p&gt;According to Worpdress documentation, and I won&amp;rsquo;t discuss this point here, directories must have the following permission: &lt;code&gt;drwxr-xr-x&lt;/code&gt; (755) and files must be: &lt;code&gt;-rw-r--r--&lt;/code&gt; (644).
Wordpress says that automatic update changes file/dir permissions, that&amp;rsquo;s true but not that way in my case, maybe a cron job could do it ?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability in Wordpress Video Gallery</title>
      <link>https://10degres.net/vulnerability-in-wordpress-video-gallery/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-in-wordpress-video-gallery/</guid>
      <description>&lt;p&gt;Recently reported by Claudio Viviani, there is an SQL Injection available in this plugin who has been downloaded more than 100k.
Developped by Apptha (again), the current version 2.7 still vulnerable and downloadable from
the official &lt;a href=&#34;https://wordpress.org/plugins/contus-video-gallery/&#34; title=&#34;Wordpress Video Gallery&#34;&gt;Wordpress Plugin Directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hole comes from the lack of filter on the GET parameter &lt;code&gt;vid&lt;/code&gt; in &lt;code&gt;/wp-content/plugins/contus-video-gallery/videogalleryrss.php&lt;/code&gt; (the plugin must be enable to perform the injection):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $thumbImageorder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w.vid ASC&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $vid             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_input&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;INPUT_GET&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $where           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AND w.vid =&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$vid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $TypeOFvideos    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $contusOBJ&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home_thumbdata&lt;/span&gt;( $thumbImageorder , $where , $dataLimit );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there is no filter specified when calling &lt;a href=&#34;http://php.net/manual/fr/function.filter-input.php&#34; title=&#34;filter_input&#34;&gt;filter_input&lt;/a&gt;, the default value is used which is &lt;code&gt;unsafe_raw&lt;/code&gt;.
According to the PHP documentation, &lt;a href=&#34;http://php.net/manual/fr/filter.filters.sanitize.php&#34; title=&#34;FILTER_UNSAFE_RAW&#34;&gt;FILTER_UNSAFE_RAW&lt;/a&gt; deletes chars under 32 and over 127 and converts &lt;code&gt;&amp;amp;&lt;/code&gt; to &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability in HD FLV Player</title>
      <link>https://10degres.net/vulnerability-in-hd-flv-player/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-in-hd-flv-player/</guid>
      <description>&lt;p&gt;Reported by &lt;a href=&#34;http://blog.sucuri.net/2014/12/critical-vulnerability-in-joomla-hd-flv-player-plugin.html&#34; title=&#34;Sucuri&#34;&gt;Sucuri&lt;/a&gt;,
the HD FLV Player suffers of an Arbitrary File Download vulnerability which is of course considered critical.&lt;/p&gt;
&lt;p&gt;The vulnerable code can be found in &lt;code&gt;download.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-disposition: attachment; filename=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;($filename));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readfile&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there is absolutly no check nor filter applied before using the &lt;code&gt;f&lt;/code&gt; parameter passed in the url, this is the perfect backdoor to get almost any file you want on the machine
(depending of the right of the user the server is running). No matter the plugin is enable or not, you simply need to run the install to be exposed.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
