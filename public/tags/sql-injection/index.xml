<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql injection on Gwendal Le Coguic</title>
    <link>https://10degres.net/tags/sql-injection/</link>
    <description>Recent content in sql injection on Gwendal Le Coguic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://10degres.net/tags/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authenticated SQL injection in Zenphoto v1.5.6 and prior</title>
      <link>https://10degres.net/cves/cve-2020-22154/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-22154/</guid>
      <description>&lt;p&gt;Zenphoto 1.5.6 was discovered to contain a SQL injection via the &lt;code&gt;postAlbumSort()&lt;/code&gt; function in &lt;code&gt;/zp-core/admin-functions.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in SimpleJobScript</title>
      <link>https://10degres.net/cves/cve-2020-8645/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-8645/</guid>
      <description>&lt;p&gt;An issue was discovered in Simplejobscript.com SJS through 1.66. There is an unauthenticated SQL injection via the job applications search function. The vulnerable parameter is &lt;code&gt;job_id&lt;/code&gt;. The function is &lt;code&gt;getJobApplicationsByJobId()&lt;/code&gt;. The file is &lt;code&gt;_lib/class.JobApplication.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in SimpleJobScript</title>
      <link>https://10degres.net/cves/cve-2020-7229/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2020-7229/</guid>
      <description>&lt;p&gt;An issue was discovered in Simplejobscript.com SJS before 1.65. There is unauthenticated SQL injection via the search engine. The parameter is &lt;code&gt;landing_location&lt;/code&gt;. The function is &lt;code&gt;countSearchedJobs()&lt;/code&gt;. The file is &lt;code&gt;_lib/class.Job.php&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wordpress testing</title>
      <link>https://10degres.net/wordpress-testing/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/wordpress-testing/</guid>
      <description>&lt;p&gt;Here is the way I usually follow to test a Wordpress install.&lt;/p&gt;
&lt;h2 id=&#34;information-gathering&#34;&gt;Information gathering&lt;/h2&gt;
&lt;p&gt;Get basic informations with &lt;a href=&#34;https://wpscan.org/&#34;&gt;WPScan&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --enumerate u --url http://www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it can&amp;rsquo;t retrieve the user list, try to use provided script &lt;code&gt;stop_user_enumeration_bypass.rb&lt;/code&gt;
For each user found, try to brute with basic passwords:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wpscan -r --url http://www.example.com --wordlist /Wordlists/Passwords/best1050.txt --username &amp;lt;username&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the version of Wordpress has been found, download it from the official archive directory:
&lt;a href=&#34;https://wordpress.org/download/release-archive/&#34;&gt;https://wordpress.org/download/release-archive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open the tested website and take a look at the source to find those strings:
&lt;code&gt;wp-content/themes&lt;/code&gt; and &lt;code&gt;wp-content/plugins&lt;/code&gt;
This could reveal more themes/plugins.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unauthenticated SQL injection in Wordpress plugin “gallery-images”</title>
      <link>https://10degres.net/cves/cve-2016-11018/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/cves/cve-2016-11018/</guid>
      <description>&lt;p&gt;An issue was discovered in the Huge-IT gallery-images plugin before 1.9.0 for WordPress. The headers &lt;code&gt;Client-Ip&lt;/code&gt; and &lt;code&gt;X-Forwarded-For&lt;/code&gt; are prone to unauthenticated SQL injection. The affected file is &lt;code&gt;gallery-images.php&lt;/code&gt;. The affected function is &lt;code&gt;huge_it_image_gallery_ajax_callback()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An extremely buggy web app !</title>
      <link>https://10degres.net/an-extremely-buggy-web-app/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/an-extremely-buggy-web-app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;bWAPP&lt;/strong&gt; is a PHP web application which is intentionnally crackable. It covers a very large set of common vulns but also some unusual case you can meet on the Internet.&lt;/p&gt;
&lt;p&gt;The goal here is to train your development skill and hacking knowledge to be able to write a better (more secure) code.
Compared to &lt;a href=&#34;https://10degres.net/damn-vulnerable-web-application/&#34;&gt;DVWA&lt;/a&gt;, you have to consider bWAPP as a much more advanced level of difficulty.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/bwapp.png&#34; alt=&#34;bwapp&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sqlmap</title>
      <link>https://10degres.net/sqlmap/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/sqlmap/</guid>
      <description>&lt;p&gt;Written in Python by &lt;a href=&#34;https://twitter.com/stamparm&#34;&gt;Miroslav Stamper&lt;/a&gt;, Sqlmap is probably the best automated tool to detect and exploit SQL Injection.&lt;/p&gt;
&lt;p&gt;Sqlmap fully supports many databases as MySQL, Microsoft SQL Server, PostgreSQL, Oracle (and many more) and is able to detect the following injection types :
Boolean based blind, Error based, Union based, Stacked queries, Time based blind, Inline queries. Depending of the target status, sqlmap is also able to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prompt an interactive sql shell&lt;/li&gt;
&lt;li&gt;download/upload files&lt;/li&gt;
&lt;li&gt;prompt a web shell&lt;/li&gt;
&lt;li&gt;crack hashed password using a dictionnary attack&lt;/li&gt;
&lt;li&gt;and a lot more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below some examples of the main functions using &lt;a href=&#34;https://10degres.net/an-extremely-buggy-web-app/&#34;&gt;bWAPP&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://10degres.net/images/sqlmap-basic-usage.png&#34; alt=&#34;sqlmap basic usage&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example sqlmap has detected that the GET parameter &lt;code&gt;title&lt;/code&gt; of the search function is vulnerable to sql injection.
Well done! Plus it found that 4 different types of injection can be used for exploitation.
Note that sqlmap has also detected that the parameter is vulnerable to XSS attacks which is unfortunatly very common these days&amp;hellip;&lt;/p&gt;
&lt;p&gt;To perform test on POST field you should write: &lt;code&gt;--data=&amp;quot;title=sqlitest&amp;amp;action=search&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the next example, I&amp;rsquo;ll turn off the verbose mode.&lt;/p&gt;
&lt;br&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability in Wordpress Video Gallery</title>
      <link>https://10degres.net/vulnerability-in-wordpress-video-gallery/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-in-wordpress-video-gallery/</guid>
      <description>&lt;p&gt;Recently reported by Claudio Viviani, there is an SQL Injection available in this plugin who has been downloaded more than 100k.
Developped by Apptha (again), the current version 2.7 still vulnerable and downloadable from
the official &lt;a href=&#34;https://wordpress.org/plugins/contus-video-gallery/&#34; title=&#34;Wordpress Video Gallery&#34;&gt;Wordpress Plugin Directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hole comes from the lack of filter on the GET parameter &lt;code&gt;vid&lt;/code&gt; in &lt;code&gt;/wp-content/plugins/contus-video-gallery/videogalleryrss.php&lt;/code&gt; (the plugin must be enable to perform the injection):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $thumbImageorder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w.vid ASC&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $vid             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_input&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;INPUT_GET&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $where           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AND w.vid =&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$vid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $TypeOFvideos    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $contusOBJ&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home_thumbdata&lt;/span&gt;( $thumbImageorder , $where , $dataLimit );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there is no filter specified when calling &lt;a href=&#34;http://php.net/manual/fr/function.filter-input.php&#34; title=&#34;filter_input&#34;&gt;filter_input&lt;/a&gt;, the default value is used which is &lt;code&gt;unsafe_raw&lt;/code&gt;.
According to the PHP documentation, &lt;a href=&#34;http://php.net/manual/fr/filter.filters.sanitize.php&#34; title=&#34;FILTER_UNSAFE_RAW&#34;&gt;FILTER_UNSAFE_RAW&lt;/a&gt; deletes chars under 32 and over 127 and converts &lt;code&gt;&amp;amp;&lt;/code&gt; to &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Damn Vulnerable Web Application</title>
      <link>https://10degres.net/damn-vulnerable-web-application/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/damn-vulnerable-web-application/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DVWA&lt;/strong&gt; is a PHP/MySQL web application that is intentionally vulnerable.
The goal is to learn common web vulnerabilities and improve your security skills by training yourself on your own server.
3 levels are available (low, medium and high) to perform those following attacks :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bruce Force&lt;/li&gt;
&lt;li&gt;Command Execution&lt;/li&gt;
&lt;li&gt;CSRF&lt;/li&gt;
&lt;li&gt;Captcha&lt;/li&gt;
&lt;li&gt;File Inclusion&lt;/li&gt;
&lt;li&gt;SQL Injection (plus Blind)&lt;/li&gt;
&lt;li&gt;File Upload&lt;/li&gt;
&lt;li&gt;XSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lowest level is usually pretty easy to bypass but the high level as a best practice presents the right way to protect your application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vulnerability - SQL Injection aka SQLi</title>
      <link>https://10degres.net/vulnerability-sql-injection-aka-sqli/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-sql-injection-aka-sqli/</guid>
      <description>Description SQL Injection overview by OWASP
SQL injection by Wikipedia
SQL statement in request parameter by PortSwigger
SQL injection (basic) by PortSwigger
SQL injection (second order) by PortSwigger
Client-side SQL injection (DOM-based) by PortSwigger
Client-side SQL injection (reflected DOM-based) by PortSwigger
Client-side SQL injection (stored DOM-based) by PortSwigger
Articles The Ultimate SQL Injection Payload by Detectify
Videos DEFCON 17: Advanced SQL Injection
Hacktivity 2012 - Joe McCray - Big Bang Theory - Pentesting high security environments</description>
    </item>
    
    <item>
      <title>Vulnerability - Subdomain takeover</title>
      <link>https://10degres.net/vulnerability-subdomain-takeover/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/vulnerability-subdomain-takeover/</guid>
      <description>Articles Hostile subdomain takeover by Detectify
Hijacking of abandoned subdomains by Detectify
Tools dnsexpire by me
3rdparty-services by me</description>
    </item>
    
  </channel>
</rss>
