<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dvwa on 10degres</title>
    <link>http://10degres.net/tags/dvwa/</link>
    <description>Recent content in dvwa on 10degres</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Mar 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://10degres.net/tags/dvwa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DVWA - CSRF</title>
      <link>http://10degres.net/dvwa-csrf/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://10degres.net/dvwa-csrf/</guid>
      <description>&lt;p&gt;Cross-Site Request Forgery aka CSRF is an attack unintentionally triggered by the user himself.
It sends HTTP requests to execute unexpected actions in different ways: trough &lt;code&gt;img&lt;/code&gt; tag to perform &lt;code&gt;GET&lt;/code&gt; requests or with Ajax requests when &lt;code&gt;POST&lt;/code&gt; is required.
You can learn basic CSRF in &lt;a href=&#34;http://10degres.net/damn-vulnerable-web-application/&#34; title=&#34;Damn Vulnerable Web Application&#34;&gt;DVWA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To perform this CSRF you firstly need to log in, then you must visit a malicious site who will perform a stealth HTTP request who will submit the change password form with specific values.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;p&gt;The original request can be found by using a local proxy like Burp Suite or analyzing HTTP headers with a browser extension like &lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/live-http-headers/&#34;&gt;Live HTTP Headers&lt;/a&gt;.
The payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;My malicious website&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;It works like a charm!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://local.dvwa.com/vulnerabilities/csrf/?password_new=azerty&amp;amp;password_conf=azerty&amp;amp;Change=Change&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; /&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>DVWA - Insecure CAPTCHA</title>
      <link>http://10degres.net/dvwa-insecure-captcha/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://10degres.net/dvwa-insecure-captcha/</guid>
      <description>&lt;p&gt;Captchas are usually used to prevent robots to make an action instead of humans.
It should add an extra layer of security but badly configured it could lead to unauthorized access&amp;hellip;&lt;/p&gt;
&lt;p&gt;When you try to submit the form without providing a captcha code, you get the following error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://10degres.net/images/dvwa-captcha-error.png&#34; alt=&#34;dvwa captcha error&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;p&gt;Try to submit an empty password and take a look to the HTTP request and her parameters, you can notice the strange variable &lt;code&gt;step&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://10degres.net/images/dvwa-captcha-low.png&#34; alt=&#34;dvwa captcha low&#34;&gt;&lt;/p&gt;
&lt;p&gt;This variable is the step in the change password functionnality.
So if you simply change it to &lt;code&gt;2&lt;/code&gt; and replay the request with this new value, it works perfectly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DVWA - File upload</title>
      <link>http://10degres.net/dvwa-file-upload/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://10degres.net/dvwa-file-upload/</guid>
      <description>&lt;p&gt;A very useful aspect of PHP is the ability to manage file uploads.
Allowing users to send a file opens a whole can of worms, so be careful when allowing this fonctionnality.
If wrong protected it could result of a full control of the server.
With DVWA you can learn effective defense.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;move_uploaded_file&lt;/span&gt;($_FILES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploaded&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;], $target_path)) {
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your image was not uploaded.&amp;#39;&lt;/span&gt;;
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $target_path &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; succesfully uploaded!&amp;#39;&lt;/span&gt;;
    $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first level is the easiest because it has absolutly no protection against malicious file upload.
Choose a file - in my case a PHP shell - and submit the form:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://10degres.net/images/dvwa-file-upload_1.png&#34; alt=&#34;DVWA file upload&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DVWA - XSS reflected</title>
      <link>http://10degres.net/dvwa-xss-reflected/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://10degres.net/dvwa-xss-reflected/</guid>
      <description>&lt;p&gt;According to OWASP Top 10, Cross-Site Scripting aka XSS takes the 3rd place in the more common and important web vulnerabilities list.
Her primary goal is to spoof the session of another user by stealing his cookie id, usually a privileged user like an admin. 
You can train XSS in Damn Vulnerable Web Application, here are some tests you can perform.&lt;/p&gt;
&lt;h2 id=&#34;low&#34;&gt;Low&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array_key_exists&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, $_GET) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ) {  
  $isempty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;  
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {  
  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;;  
  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;];  
  $html &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;;  
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code output the &lt;code&gt;name&lt;/code&gt; parameter without any filter so it&amp;rsquo;s very vulnerable to XSS!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Damn Vulnerable Web Application</title>
      <link>http://10degres.net/damn-vulnerable-web-application/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://10degres.net/damn-vulnerable-web-application/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DVWA&lt;/strong&gt; is a PHP/MySQL web application that is intentionally vulnerable.
The goal is to learn common web vulnerabilities and improve your security skills by training yourself on your own server.
3 levels are available (low, medium and high) to perform those following attacks :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bruce Force&lt;/li&gt;
&lt;li&gt;Command Execution&lt;/li&gt;
&lt;li&gt;CSRF&lt;/li&gt;
&lt;li&gt;Captcha&lt;/li&gt;
&lt;li&gt;File Inclusion&lt;/li&gt;
&lt;li&gt;SQL Injection (plus Blind)&lt;/li&gt;
&lt;li&gt;File Upload&lt;/li&gt;
&lt;li&gt;XSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lowest level is usually pretty easy to bypass but the high level as a best practice presents the right way to protect your application.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
