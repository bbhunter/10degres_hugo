<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>remote command execution on Gwendal Le Coguic</title>
    <link>https://10degres.net/tags/remote-command-execution/</link>
    <description>Recent content in remote command execution on Gwendal Le Coguic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://10degres.net/tags/remote-command-execution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weevely</title>
      <link>https://10degres.net/weevely/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://10degres.net/weevely/</guid>
      <description>&lt;p&gt;Weevely is a PHP command line web shell usually used as a backdoor while performing the post exploitation phase of a penetration test.
By default in Kali Linux, the installed version 1.1 isn&amp;rsquo;t supported anymore but version 3 is available on &lt;a href=&#34;https://github.com/epinna/weevely3&#34; title=&#34;Weevely on GitHub&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generate the backdoor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;weevely generate.&amp;lt;mode&amp;gt; &amp;lt;password&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The password is optionnal but it&amp;rsquo;s important to protect your customer from other users because an unwanted access can easily lead to a full access on the server with privileges escalation. There is three kinds of backdoor available but this functionnality seems to have been removed in version 3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;htaccess&lt;/strong&gt;: a single &lt;code&gt;.htaccess&lt;/code&gt; file is created containing the malicious code and the right Apache directive so that all &lt;code&gt;.htaccess&lt;/code&gt; files are considered as regular PHP script&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;img&lt;/strong&gt;: giving an existing image, Weevely will concatenate the binary datas and the malicious code, plus it also creates an &lt;code&gt;.htaccess&lt;/code&gt;
to tell Apache that the image should be considered as a regular PHP script (that means both files should be uploaded on the target server)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;php&lt;/strong&gt;: this is the default, a single PHP script is generated&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
